{"version":3,"sources":["actions/cart.ts","constants/actions.ts","selectors/cart.ts","libs/sort.ts","components/qtySwitcher/qtySwitcher.tsx","components/item/item.tsx","components/itemsList/itemsList.tsx","containers/cart.tsx","App.tsx","serviceWorker.ts","reducers/cart/sort.ts","reducers/cart/index.ts","reducers/cart/items.ts","reducers/index.ts","libs/configureStore.ts","index.tsx"],"names":["setCartItems","items","type","payload","getCartItems","state","cart","getCartSort","sort","getSortedItems","createSelector","_ref","sortBy","order","field","DESC","arguments","length","undefined","comparator","list","map","el","i","a","b","weight","stableSort","sortByField","getItemByID","id","itemId","find","_ref2","QtySwitcher","_React$PureComponent","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","decreaseHandler","_this$props","props","value","onDecrease","min","inherits","createClass","key","_this$props2","onIncrease","react_default","createElement","className","onClick","React","PureComponent","defaultProps","Item","removeHandler","remove","increaseCountHandler","increaseCount","decreaseCountHandler","_this$props3","decreaseCount","_this$props4","name","count","price","react","qtySwitcher_QtySwitcher","connect","_getItemByID","ItemsList","toggleSortingOrder","changeSortingField","getColumnClassnames","_this$props$sort","classNames","active","desc","asc","_this2","item_item","loadItems","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","next","fetch","headers","Content-Type","then","res","json","sent","stop","_x","itemsList_itemsList","App","Component","Boolean","window","location","hostname","match","initialState","combineReducers","action","filter","item","objectSpread","persistConfig","storage","persistedReducer","persistReducer","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","configureStore","ReactDOM","render","es","integration_react","loading","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0dc6f520.chunk.js","sourcesContent":["import { Dispatch } from 'redux';\nimport {\n  SET_CART_ITEMS,\n  REMOVE_CART_ITEM,\n  SET_SORTING_FIELD,\n  TOGGLE_SORTING_ORDER,\n  INCREASE_COUNT,\n  DECREASE_COUNT\n} from '../constants/actions';\nimport { CartItem, SortableFields } from '../types';\n\nexport interface SetCartItems {\n  type: SET_CART_ITEMS;\n  payload: Array<CartItem>;\n}\n\n/**\n * Set cart items list\n * @param items {Array<CartItem>} cart items list\n */\nexport const setCartItems = (items: Array<CartItem>): SetCartItems => ({\n  type: SET_CART_ITEMS,\n  payload: items\n});\n\nexport interface RemoveCartItem {\n  type: REMOVE_CART_ITEM;\n  payload: string;\n}\n/**\n * Remove item from cart by ID\n * @param id {string} cart item id\n */\nexport const removeCartItem = (id: string): RemoveCartItem => ({\n  type: REMOVE_CART_ITEM,\n  payload: id\n});\n\n/**\n * Load list of cart items from server\n */\nexport const fetchItems = () => async (dispatch: Dispatch) => {\n  const items = await fetch('api/items.json', {\n    headers: { 'Content-Type': 'application/json' }\n  }).then(res => res.json());\n\n  dispatch(setCartItems(items));\n};\n\nexport interface SetSortingField {\n  type: SET_SORTING_FIELD;\n  payload: SortableFields;\n}\n\n/**\n * Change \"sort by\" field for cart items\n * \n * @param {SortableFields} field - field name\n */\nexport const changeSortingField = (field: SortableFields): SetSortingField => ({\n  type: SET_SORTING_FIELD,\n  payload: field\n});\n\nexport interface ToggleSortingOrder {\n  type: TOGGLE_SORTING_ORDER;\n}\n\n/**\n * Change sort order to opposite\n */\nexport const toggleSortingOrder = (): ToggleSortingOrder => ({\n  type: TOGGLE_SORTING_ORDER\n});\n\nexport interface IncreaseCount {\n  type: INCREASE_COUNT;\n  payload: string;\n}\n\n/**\n * Increase count of given item\n * \n * @param {string} id - cart item id\n */\nexport const increaseCount = (id: string): IncreaseCount => ({\n  type: INCREASE_COUNT,\n  payload: id\n});\n\nexport interface DecreaseCount {\n  type: DECREASE_COUNT;\n  payload: string;\n}\n\n/**\n * Decrease count of given item\n * \n * @param {string} id - cart item id\n */\nexport const decreaseCount = (id: string): DecreaseCount => ({\n  type: DECREASE_COUNT,\n  payload: id\n});\n","export const SET_CART_ITEMS = 'SET_CART_ITEMS';\nexport type SET_CART_ITEMS = typeof SET_CART_ITEMS;\n\nexport const REMOVE_CART_ITEM = 'REMOVE_CART_ITEM';\nexport type REMOVE_CART_ITEM = typeof REMOVE_CART_ITEM;\n\nexport const SET_SORTING_FIELD = 'SET_SORTING_FIELD';\nexport type SET_SORTING_FIELD = typeof SET_SORTING_FIELD;\n\nexport const TOGGLE_SORTING_ORDER = 'TOGGLE_SORTING_ORDER';\nexport type TOGGLE_SORTING_ORDER = typeof TOGGLE_SORTING_ORDER;\n\nexport const INCREASE_COUNT = 'INCREASE_COUNT';\nexport type INCREASE_COUNT = typeof INCREASE_COUNT;\n\nexport const DECREASE_COUNT = 'DECREASE_COUNT';\nexport type DECREASE_COUNT = typeof DECREASE_COUNT;\n\n","import { createSelector, ParametricSelector } from 'reselect';\nimport { StoreType, CartItem } from '../types';\nimport { CartItems } from '../reducers/cart/items';\nimport { CartSort } from '../reducers/cart/sort';\nimport { sortByField } from '../libs/sort';\n\nexport const getCartItems = (state: StoreType): CartItems => state.cart.items;\nexport const getCartSort = (state: StoreType): CartSort => state.cart.sort;\n\nexport const getSortedItems = createSelector(\n  getCartSort,\n  getCartItems,\n  ({ sortBy, order }, items) => {\n    if (sortBy === '') return items;\n    return sortByField(sortBy, items, order === 'DESC');\n  }\n);\n\nconst getIdFromProps: ParametricSelector<StoreType, string, string> = (\n  state,\n  id\n) => id;\n\nexport const getItemByID = createSelector(\n  getIdFromProps,\n  getCartItems,\n  (itemId, items): CartItem => <CartItem>items.find(({ id }) => id === itemId)\n);\n","import { CartItem, SortableFields } from '../types';\n\ntype Comparator<T> = (arg0: T, arg1: T) => number;\n\n/**\n * Stable sort for compatibility with old browsers,\n * all modern engines already have stable sorting algorithms\n *\n * @param {Comparator<T>} comparator - compare function\n * @param {T[]} list - list of items for sorting\n * @returns {T[]} - new sorted array\n */\nexport function stableSort<T = any>(comparator: Comparator<T>, list: T[]): T[] {\n  return list\n    .map((el, i) => ({ el, i }))\n    .sort((a, b) => {\n      const weight = comparator(a.el, b.el);\n      return weight !== 0 ? weight : a.i - b.i;\n    })\n    .map(({ el }) => el);\n}\n\n/**\n * Sort passed cart items by their sortable fields\n * \n * @param {SortableFields} field - one of sortable fields in cart item\n * @param {CartItem[]} items - list of cart items\n * @param {boolean} [DESC=false] - DESC order\n * @returns {CartItem[]} - new array of sorted cart items\n */\nexport function sortByField(\n  field: SortableFields,\n  items: CartItem[],\n  DESC: boolean = false\n): CartItem[] {\n  const comparator: Comparator<CartItem> = (a, b) => {\n    if (a[field] > b[field]) return DESC ? -1 : 1;\n    if (a[field] < b[field]) return DESC ? 1 : -1;\n    return 0;\n  };\n  return stableSort(comparator, items);\n}\n","import React from 'react';\nimport './qtySwitcher.css';\n\nexport interface PropsType {\n  /**\n   * Current value\n   * @type {number}\n   */\n  value: number;\n  /**\n   * Minimum allowed value\n   * @type {number}\n   */\n  min: number;\n  /**\n   * Handler for increase button\n   */\n  onIncrease: () => void;\n  /**\n   * Handler for decrease button\n   */\n  onDecrease: () => void;\n}\n\nexport class QtySwitcher extends React.PureComponent<PropsType> {\n  static defaultProps = {\n    min: 1\n  };\n\n  /**\n   * Handler for \"decrease\" button,\n   * call onDecrease prop current value for than minimum allowed\n   */\n  decreaseHandler = () => {\n    const { value, onDecrease, min } = this.props;\n    if (value > min) onDecrease();\n  };\n\n  render() {\n    const { onIncrease, value } = this.props;\n\n    return (\n      <div className=\"qty-switcher\">\n        <button onClick={this.decreaseHandler}>-</button>\n        <span className=\"qty-switcher__value\">{value}</span>\n        <button onClick={onIncrease}>+</button>\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport { QtySwitcher } from '../qtySwitcher/qtySwitcher';\nimport { connect } from 'react-redux';\nimport { StoreType } from '../../types';\nimport { getItemByID } from '../../selectors/cart';\nimport {\n  removeCartItem,\n  increaseCount,\n  decreaseCount\n} from '../../actions/cart';\n\ninterface PropsType {\n  id: string;\n  name: string;\n  count: number;\n  price: number;\n  increaseCount: (id: string) => void;\n  decreaseCount: (id: string) => void;\n  remove: (id: string) => void;\n}\n\nclass Item extends React.PureComponent<PropsType> {\n  /**\n   * Remove item from cart\n   */\n  removeHandler = () => {\n    const { id, remove } = this.props;\n    remove(id);\n  };\n\n  /**\n   * Increase count of item in cart by one\n   */\n  increaseCountHandler = () => {\n    const { id, increaseCount } = this.props;\n    increaseCount(id);\n  };\n\n  /**\n   * Decrease count of item in cart by one\n   */\n  decreaseCountHandler = () => {\n    const { id, decreaseCount } = this.props;\n    decreaseCount(id);\n  };\n\n  render() {\n    const { name, count, price } = this.props;\n\n    return (\n      <tr>\n        <td>{name}</td>\n        <td>\n          <QtySwitcher\n            value={count}\n            onDecrease={this.decreaseCountHandler}\n            onIncrease={this.increaseCountHandler}\n          />\n        </td>\n        <td>{price}</td>\n        <td>\n          <button onClick={this.removeHandler}>X</button>\n        </td>\n      </tr>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreType, { id }: { id: string }) => {\n  const { name, count, price } = getItemByID(state, id);\n  return { name, count, price };\n};\n\nexport default connect(\n  mapStateToProps,\n  { remove: removeCartItem, increaseCount, decreaseCount }\n)(Item);\n","import * as React from 'react';\nimport { CartItem, StoreType, SortableFields } from '../../types';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\n\nimport './itemsList.css';\nimport { changeSortingField, toggleSortingOrder } from '../../actions/cart';\nimport { getSortedItems, getCartSort } from '../../selectors/cart';\nimport { CartSort } from '../../reducers/cart/sort';\nimport Item from '../item/item';\n\ninterface PropsType {\n  items: Array<CartItem>;\n  sort: CartSort;\n  changeSortingField: (field: SortableFields) => void;\n  toggleSortingOrder: () => void;\n}\n\nclass ItemsList extends React.PureComponent<PropsType> {\n  /**\n   * Sort items by given field, if items already sorted\n   * changing sort order\n   *\n   * @param {SortableFields} field field that should be used for sorting\n   */\n  sort = (field: SortableFields) => {\n    const {\n      toggleSortingOrder,\n      changeSortingField,\n      sort: { sortBy }\n    } = this.props;\n\n    if (sortBy === field) {\n      toggleSortingOrder();\n    } else {\n      changeSortingField(field);\n    }\n  };\n\n  /**\n   * Return css classes for columns headers\n   *\n   * @param {SortableFields} field table column name\n   */\n  getColumnClassnames = (field: SortableFields): string => {\n    const {\n      sort: { sortBy, order }\n    } = this.props;\n\n    return classNames(\n      { active: sortBy === field },\n      { desc: order === 'DESC' },\n      { asc: order === 'ASC' }\n    );\n  };\n\n  render() {\n    const { items } = this.props;\n\n    return (\n      <table className=\"cart-items-table\">\n        <thead>\n          <tr>\n            <th\n              onClick={() => this.sort('name')}\n              className={this.getColumnClassnames('name')}\n            >\n              Название продукта\n            </th>\n            <th\n              onClick={() => this.sort('count')}\n              className={this.getColumnClassnames('count')}\n            >\n              Количество\n            </th>\n            <th\n              onClick={() => this.sort('price')}\n              className={this.getColumnClassnames('price')}\n            >\n              Цена\n            </th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          {items.map(({ id }) => (\n            <Item id={id} key={id} />\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreType) => ({\n  items: getSortedItems(state),\n  sort: getCartSort(state)\n});\n\nexport default connect(\n  mapStateToProps,\n  { changeSortingField, toggleSortingOrder }\n)(ItemsList);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { CartItem, StoreType } from '../types';\nimport { fetchItems } from '../actions/cart';\nimport ItemsList from '../components/itemsList/itemsList';\n\ninterface PropsType {\n  loadItems: () => void;\n  items: Array<CartItem>;\n}\n\nconst Cart = ({ loadItems, items }: PropsType) => {\n  return (\n    <>\n      <ItemsList />\n      <button type=\"button\" onClick={loadItems}>\n        Загрузить...\n      </button>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: StoreType) => ({ items: state.cart.items });\n\nexport default connect(\n  mapStateToProps,\n  { loadItems: fetchItems }\n)(Cart);\n","import React, { Component } from 'react';\nimport Cart from './containers/cart';\n\nclass App extends Component {\n  render() {\n    return <Cart />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SetSortingField, ToggleSortingOrder } from '../../actions/cart';\nimport { SortableFields, SortOrder } from '../../types';\nimport {\n  SET_SORTING_FIELD,\n  TOGGLE_SORTING_ORDER\n} from '../../constants/actions';\n\nexport interface CartSort {\n  sortBy: SortableFields;\n  order: SortOrder;\n}\n\nconst initialState: CartSort = {\n  sortBy: '',\n  order: 'DESC'\n};\n\nexport default function(\n  state: CartSort = initialState,\n  action: SetSortingField | ToggleSortingOrder\n): CartSort {\n  switch (action.type) {\n    case SET_SORTING_FIELD:\n      return { sortBy: action.payload, order: 'DESC' };\n    case TOGGLE_SORTING_ORDER:\n      return { ...state, order: state.order === 'DESC' ? 'ASC' : 'DESC' };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport items from './items';\nimport sort from './sort';\n\nexport default combineReducers({ items, sort });\n","import { CartItem } from '../../types';\nimport {\n  SetCartItems,\n  RemoveCartItem,\n  IncreaseCount,\n  DecreaseCount\n} from '../../actions/cart';\nimport {\n  SET_CART_ITEMS,\n  REMOVE_CART_ITEM,\n  INCREASE_COUNT,\n  DECREASE_COUNT\n} from '../../constants/actions';\n\nexport type CartItems = Array<CartItem>;\n\nexport default function(\n  state: CartItems = [],\n  action: SetCartItems | RemoveCartItem | IncreaseCount | DecreaseCount\n): CartItems {\n  switch (action.type) {\n    case SET_CART_ITEMS:\n      return action.payload;\n    case REMOVE_CART_ITEM:\n      return state.filter(({ id }) => id !== action.payload);\n    case INCREASE_COUNT:\n      return state.map(item =>\n        item.id === action.payload ? { ...item, count: item.count + 1 } : item\n      );\n    case DECREASE_COUNT:\n      return state.map(item =>\n        item.id === action.payload ? { ...item, count: item.count - 1 } : item\n      );\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport cart from './cart';\n\n\nexport default combineReducers({ cart });\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer from '../reducers';\n\nconst persistConfig = {\n  key: 'redux-cart',\n  storage\n};\n\nexport function configureStore() {\n  const persistedReducer = persistReducer(persistConfig, rootReducer);\n  const store = createStore(\n    persistedReducer,\n    composeWithDevTools(applyMiddleware(thunk))\n  );\n  const persistor = persistStore(store);\n  return { store, persistor };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { configureStore } from './libs/configureStore';\n\nconst { store, persistor } = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={'Загрузка...'} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}